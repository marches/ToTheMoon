$date
	Mon Dec 10 10:58:25 2018
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module agcTest $end
$var reg 1 ! clk $end
$scope module dut $end
$var wire 1 ! clk $end
$var wire 15 " preU [14:0] $end
$var wire 3 # pcAdd [2:0] $end
$var wire 1 $ new_extraflag $end
$var wire 1 % mem_WE $end
$var wire 16 & memOut [15:0] $end
$var wire 12 ' mAddr [11:0] $end
$var wire 16 ( inZ [15:0] $end
$var wire 16 ) inY [15:0] $end
$var wire 16 * inX [15:0] $end
$var wire 16 + inQ [15:0] $end
$var wire 16 , inLP [15:0] $end
$var wire 16 - inG [15:0] $end
$var wire 16 . inB [15:0] $end
$var wire 16 / inA [15:0] $end
$var wire 1 0 data_in_MUX $end
$var wire 3 1 alu_op [2:0] $end
$var wire 16 2 aNotA [15:0] $end
$var wire 1 3 aAdd $end
$var wire 1 4 Z_WE $end
$var wire 2 5 Z_MUX [1:0] $end
$var wire 1 6 Y_WE $end
$var wire 3 7 Y_MUX [2:0] $end
$var wire 1 8 X_WE $end
$var wire 2 9 X_MUX [1:0] $end
$var wire 16 : U [15:0] $end
$var wire 12 ; S [11:0] $end
$var wire 1 < Q_WE $end
$var wire 2 = Q_MUX [1:0] $end
$var wire 12 > PC_addr [11:0] $end
$var wire 1 ? MAddr_MUX $end
$var wire 1 @ LP_WE $end
$var wire 1 A LP_MUX $end
$var wire 1 B G_WE $end
$var wire 1 C G_MUX $end
$var wire 1 D B_WE $end
$var wire 1 E B_MUX $end
$var wire 1 F A_WE $end
$var wire 2 G A_MUX [1:0] $end
$var reg 1 H extraflag $end
$var reg 16 I regA [15:0] $end
$var reg 16 J regB [15:0] $end
$var reg 16 K regG [15:0] $end
$var reg 16 L regLP [15:0] $end
$var reg 16 M regQ [15:0] $end
$var reg 16 N regX [15:0] $end
$var reg 16 O regY [15:0] $end
$var reg 16 P regZ [15:0] $end
$scope module alu $end
$var wire 16 Q A [15:0] $end
$var wire 16 R B [15:0] $end
$var wire 1 ! clk $end
$var wire 15 S resultAND [14:0] $end
$var wire 3 T command [2:0] $end
$var reg 15 U C [14:0] $end
$var reg 15 V D [14:0] $end
$var reg 30 W product [29:0] $end
$var reg 15 X res [14:0] $end
$var reg 15 Y result [14:0] $end
$scope begin genblock[0] $end
$upscope $end
$scope begin genblock[1] $end
$upscope $end
$scope begin genblock[2] $end
$upscope $end
$scope begin genblock[3] $end
$upscope $end
$scope begin genblock[4] $end
$upscope $end
$scope begin genblock[5] $end
$upscope $end
$scope begin genblock[6] $end
$upscope $end
$scope begin genblock[7] $end
$upscope $end
$scope begin genblock[8] $end
$upscope $end
$scope begin genblock[9] $end
$upscope $end
$scope begin genblock[10] $end
$upscope $end
$scope begin genblock[11] $end
$upscope $end
$scope begin genblock[12] $end
$upscope $end
$scope begin genblock[13] $end
$upscope $end
$scope begin genblock[14] $end
$upscope $end
$upscope $end
$scope module ccs $end
$var wire 16 Z A [15:0] $end
$var reg 1 3 aAdd $end
$var reg 16 [ aNotA [15:0] $end
$var reg 3 \ pcAdd [2:0] $end
$upscope $end
$scope module control $end
$var wire 1 ! clk $end
$var wire 1 H extracode $end
$var wire 3 ] opcode [2:0] $end
$var wire 2 ^ qc [1:0] $end
$var reg 2 _ a_mux [1:0] $end
$var reg 1 F a_wr $end
$var reg 3 ` alu_op [2:0] $end
$var reg 1 E b_mux $end
$var reg 1 D b_wr $end
$var reg 5 a count [4:0] $end
$var reg 1 $ ext_flag $end
$var reg 1 C g_mux $end
$var reg 1 B g_wr $end
$var reg 1 A lp_mux $end
$var reg 1 @ lp_wr $end
$var reg 1 ? maddr_mux $end
$var reg 1 0 mdata_mux $end
$var reg 1 % mem_wr $end
$var reg 2 b q_mux [1:0] $end
$var reg 1 < q_wr $end
$var reg 5 c state [4:0] $end
$var reg 2 d x_mux [1:0] $end
$var reg 1 8 x_wr $end
$var reg 3 e y_mux [2:0] $end
$var reg 1 6 y_wr $end
$var reg 2 f z_mux [1:0] $end
$var reg 1 4 z_wr $end
$upscope $end
$scope module mem $end
$var wire 1 ! clk $end
$var wire 16 g dataIn [15:0] $end
$var wire 3 h eBank [2:0] $end
$var wire 5 i fBank [4:0] $end
$var wire 16 j finalAddress [15:0] $end
$var wire 12 k memAddress [11:0] $end
$var wire 16 l regA [15:0] $end
$var wire 16 m regB [15:0] $end
$var wire 16 n regG [15:0] $end
$var wire 16 o regLP [15:0] $end
$var wire 16 p regQ [15:0] $end
$var wire 16 q regX [15:0] $end
$var wire 16 r regY [15:0] $end
$var wire 16 s regZ [15:0] $end
$var wire 16 t result [15:0] $end
$var wire 1 u superBank $end
$var wire 1 % writeEnable $end
$var wire 16 v finalAddress1 [15:0] $end
$scope module memLogic $end
$var wire 1 ! clk $end
$var wire 3 w eBank [2:0] $end
$var wire 5 x fBank [4:0] $end
$var wire 12 y memAddress [11:0] $end
$var wire 1 u superBank $end
$var reg 16 z finalAddress [15:0] $end
$upscope $end
$upscope $end
$scope module parity $end
$var wire 15 { initialInput [14:0] $end
$var wire 1 | inverseParity $end
$var wire 16 } finalOutput [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#100000
$dumpvars
bx }
x|
bx {
b0xxxxxxxxxxxx z
bx y
b0 x
b0 w
b0xxxxxxxxxxxx v
0u
bx t
bx s
bx r
bx q
bx p
bx o
bx n
bx m
bx l
bx k
b0xxxxxxxxxxxx j
b0 i
b0 h
bx g
bx f
bx e
bx d
b1100 c
bx b
b0 a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
xH
bx G
0F
xE
0D
xC
0B
xA
0@
x?
bx >
bx =
0<
bx ;
bx :
bx 9
08
bx 7
06
bx 5
04
x3
bx 2
bx 1
x0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
bx &
0%
x$
bx #
bx "
0!
$end
#110000
1!
#120000
0!
#130000
1!
#140000
0!
#150000
1!
#160000
0!
#170000
1!
#180000
0!
#190000
1!
#200000
0!
#210000
1!
#220000
0!
#230000
1!
#240000
0!
#250000
1!
#260000
0!
#270000
1!
#280000
0!
#290000
1!
#300000
0!
#310000
1!
#320000
0!
#330000
1!
#340000
0!
#350000
1!
#360000
0!
#370000
1!
#380000
0!
#390000
1!
#400000
0!
#410000
1!
#420000
0!
#430000
1!
#440000
0!
#450000
1!
#460000
0!
#470000
1!
#480000
0!
#490000
1!
#500000
0!
#510000
1!
#520000
0!
#530000
1!
#540000
0!
#550000
1!
#560000
0!
#570000
1!
#580000
0!
#590000
1!
#600000
0!
#610000
1!
#620000
0!
#630000
1!
#640000
0!
#650000
1!
#660000
0!
#670000
1!
#680000
0!
#690000
1!
#700000
0!
#710000
1!
#720000
0!
#730000
1!
#740000
0!
#750000
1!
#760000
0!
#770000
1!
#780000
0!
#790000
1!
#800000
0!
#810000
1!
#820000
0!
#830000
1!
#840000
0!
#850000
1!
#860000
0!
#870000
1!
#880000
0!
#890000
1!
#900000
0!
#910000
1!
#920000
0!
#930000
1!
#940000
0!
#950000
1!
#960000
0!
#970000
1!
#980000
0!
#990000
1!
#1000000
0!
#1010000
1!
#1020000
0!
#1030000
1!
#1040000
0!
#1050000
1!
#1060000
0!
#1070000
1!
#1080000
0!
#1090000
1!
#1100000
0!
#1110000
1!
#1120000
0!
#1130000
1!
#1140000
0!
#1150000
1!
#1160000
0!
#1170000
1!
#1180000
0!
#1190000
1!
#1200000
0!
#1210000
1!
#1220000
0!
#1230000
1!
#1240000
0!
#1250000
1!
#1260000
0!
#1270000
1!
#1280000
0!
#1290000
1!
#1300000
0!
#1310000
1!
#1320000
0!
#1330000
1!
#1340000
0!
#1350000
1!
#1360000
0!
#1370000
1!
#1380000
0!
#1390000
1!
#1400000
0!
#1410000
1!
#1420000
0!
#1430000
1!
#1440000
0!
#1450000
1!
#1460000
0!
#1470000
1!
#1480000
0!
#1490000
1!
#1500000
0!
#1510000
1!
#1520000
0!
#1530000
1!
#1540000
0!
#1550000
1!
#1560000
0!
#1570000
1!
#1580000
0!
#1590000
1!
#1600000
0!
#1610000
1!
#1620000
0!
#1630000
1!
#1640000
0!
#1650000
1!
#1660000
0!
#1670000
1!
#1680000
0!
#1690000
1!
#1700000
0!
#1710000
1!
#1720000
0!
#1730000
1!
#1740000
0!
#1750000
1!
#1760000
0!
#1770000
1!
#1780000
0!
#1790000
1!
#1800000
0!
#1810000
1!
#1820000
0!
#1830000
1!
#1840000
0!
#1850000
1!
#1860000
0!
#1870000
1!
#1880000
0!
#1890000
1!
#1900000
0!
#1910000
1!
#1920000
0!
#1930000
1!
#1940000
0!
#1950000
1!
#1960000
0!
#1970000
1!
#1980000
0!
#1990000
1!
#2000000
0!
#2010000
1!
#2020000
0!
#2030000
1!
#2040000
0!
#2050000
1!
#2060000
0!
#2070000
1!
#2080000
0!
#2090000
1!
#2100000
0!
